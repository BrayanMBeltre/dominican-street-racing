---
import { Image } from "astro:assets";
import heartImage from "~/public/assets/heart.png";
import warningImage from "~/public/assets/warning.svg";
---

<div
    draggable="false"
    oncontextmenu="return false"
    onselectstart="return false"
    ondragstart="return false"
    class="w-screen h-full max-w-[768px]"
>
    <div class="absolute w-full h-full">
        <div
            id="startScreen"
            class="flex w-full h-full bg-[#00c0f0] flex-col items-center justify-center"
        >
            <h1 class="text-4xl">Car Game</h1>

            <button id="playButton" class="mt-16 underline"> Play</button>
        </div>

        <div
            id="gameOverScreen"
            class="hidden w-full h-full bg-[#00c0f0] flex-col items-center justify-center"
        >
            <h1 class="text-4xl">Game Over</h1>

            <h2 class="text-2xl mt-16">
                Score: <span class="HUDScore"></span>
            </h2>

            <button class="playAgainButton mt-16 underline"> Play Again</button>
        </div>

        <div
            id="pauseScreen"
            class="hidden w-full h-full bg-[#00c0f0] flex-col items-center justify-center"
        >
            <h1 class="text-4xl">Paused</h1>

            <button id="muteButton" class="mt-16 underline">Mute</button>
            <button class="playAgainButton mt-16 underline">Restart</button>
            <button id="resumeButton" class="mt-16 underline">Resume</button>
        </div>

        <div id="HUD" class="hidden p-2 top-5 left-5 justify-between">
            <div>
                <button id="menuButton">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-10 w-10"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 6h16M4 12h16m-7 6h7"></path>
                    </svg>
                </button>
            </div>

            <div class="flex items-center justify-start gap-2">
                <div
                    class="pixel-corners bg-white text-black flex items-center justify-center px-4 py-3 gap-2"
                >
                    <Image src={warningImage} alt={"Infractions"} />

                    <span id="HUDInfractions">3</span>
                </div>

                <div
                    class="pixel-corners bg-white text-black flex items-center justify-center px-4 py-3 gap-2"
                >
                    <span class="HUDScore">3</span>

                    <span>KM</span>
                </div>

                <div
                    class="pixel-corners bg-white text-black flex items-center justify-center px-4 py-3 gap-2"
                >
                    <Image src={heartImage} alt={"Hud background"} />

                    <span id="HUDLives">3</span>
                </div>
            </div>
        </div>
    </div>

    <div id="canvas" class="h-full w-full"></div>
</div>

<script>
    import { Player } from "@/game/player";
    import { Opponent } from "@/game/opponent";
    import { RoadSegment } from "@/game/roadSegment";
    import { Particle } from "@/game/particle";
    // import { Particle } from "@/game/particle";

    const canvas = document.getElementById("canvas")!;

    const startScreen = document.getElementById("startScreen")!;
    const pauseScreen = document.getElementById("pauseScreen")!;
    const gameoverScreen = document.getElementById("gameOverScreen")!;
    const HUD = document.getElementById("HUD")!;

    const HUDInfractions = document.getElementById("HUDInfractions")!;
    const HUDScore = document.getElementsByClassName("HUDScore")!;
    const HUDLives = document.getElementById("HUDLives")!;

    const menuButton = document.getElementById("menuButton")!;
    const playButton = document.getElementById("playButton")!;
    const playAgainButton = document.getElementsByClassName("playAgainButton")!;
    const muteButton = document.getElementById("muteButton")!;
    const resumeButton = document.getElementById("resumeButton")!;

    const backgroundMusic = new Audio("/assets/backgroundMusic.mp3");
    backgroundMusic.loop = true;

    let redCardImage: p5.Image;
    let greenCardImage: p5.Image;
    let purpleCardImage: p5.Image;
    let explosionImage: p5.Image;
    let warningImage: p5.Image;
    let policeImage: p5.Image;

    // Sounds
    let carCrashSound: p5.SoundFile;
    let whistleSound: p5.SoundFile;

    let player: Player;
    let playerCarWidth = 50;
    let playerCarHeight = 100;
    let oppoents: Array<Opponent> = [];
    let polices: Array<Opponent> = [];

    let lives: number = 3;
    let score: number = 0;
    let infractions: number = 0;

    // Road
    let roadColor = "#242526";
    let roadSegments: Array<RoadSegment> = [];
    let laneWidth = playerCarWidth * 2;

    let particles: Array<Particle> = [];

    let isMuted = localStorage.getItem("isMuted") === "true" ? true : false;
    muteButton.innerText = isMuted ? "Unmute" : "Mute";

    const showPage = (page: HTMLElement) => {
        page.classList.replace("hidden", "flex");
    };

    const hidePage = (page: HTMLElement) => {
        page.classList.replace("flex", "hidden");
    };

    const preloadAssets = (p: p5) => {
        redCardImage = p.loadImage("/assets/carRed.png");
        purpleCardImage = p.loadImage("/assets/carBlue.png");
        explosionImage = p.loadImage("/assets/explosion.gif");
        warningImage = p.loadImage("/assets/warning.png");
        policeImage = p.loadImage("/assets/police.png");

        carCrashSound = p.loadSound("/assets/carCrashSound.mp3");
        whistleSound = p.loadSound("/assets/whistleSound.wav");
    };

    const sketch = (p: p5) => {
        p.preload = () => preloadAssets(p);

        p.setup = () => {
            p.createCanvas(canvas.clientWidth, canvas.clientHeight);

            // check how many lanes we can fit given the width of the cars and the width of the canvas
            const roadRows = canvas.clientHeight / 250 + 1;

            for (let row = 0; row < roadRows; row++) {
                roadSegments.push(
                    new RoadSegment({
                        y: row * 250,
                        laneWidth: laneWidth,
                        speed: 5,
                    }),
                );
            }

            greenCardImage = p.loadImage("/assets/carGreen.png");

            player = new Player({
                x: p.width / 2,
                y: p.height - 200,
                image: greenCardImage,
                height: playerCarHeight,
                width: playerCarWidth,
                speed: 5,
            });
        };

        p.draw = () => {
            p.background(roadColor);

            // HUD
            HUDLives.innerText = lives.toString();
            // HUDScore.innerText = score.toString();

            for (let s of HUDScore) {
                s.innerHTML = score.toString();
            }

            HUDInfractions.innerText = infractions.toString();

            // if (isPaused || isGameOver) {
            //     p.noLoop();
            //     backgroundMusic.pause();
            // }

            if (lives <= 0 || infractions >= 3) {
                showPage(gameoverScreen);

                p.noLoop();
                backgroundMusic.pause();
            }

            // Draw the road segments
            for (const segment of roadSegments) {
                segment.draw(p);
            }

            // move the last segment to the front
            if (roadSegments[roadSegments.length - 1].isOffScreen(p)) {
                let lastSegment = roadSegments.pop()!;
                lastSegment.state.y = -250;
                roadSegments.unshift(lastSegment);
            }

            for (let particle of particles) {
                particle.draw(p);
            }

            particles = particles.filter((particle) => !particle.isDone());

            // draw the player
            player.draw(p);

            // draw the opponents
            for (let opponent of oppoents) {
                // draw a warning if the opponent is about to go off screen
                if (opponent.state.y > p.height) {
                    p.image(warningImage, opponent.state.x + 25, p.height - 50);
                }

                opponent.draw(p);
            }

            // opponent logic
            oppoents = oppoents.filter((oppoent) => {
                if (oppoent.isOffScreen()) {
                    return false;
                }

                if (oppoent.collidedWithPlayer(player)) {
                    lives -= 1;

                    particles.push(
                        new Particle({
                            x: oppoent.state.x,
                            y: oppoent.state.y,
                            image: explosionImage,
                            duration: 30,
                        }),
                    );

                    !isMuted &&
                        carCrashSound.isLoaded() &&
                        carCrashSound.play();

                    return false;
                }

                return true;
            });

            // draw the polices
            for (let police of polices) {
                police.draw(p);
            }

            // police logic
            polices = polices.filter((police) => {
                if (police.isOffScreen()) {
                    return false;
                }

                if (police.collidedWithPlayer(player)) {
                    infractions += 1;

                    particles.push(
                        new Particle({
                            x: police.state.x,
                            y: police.state.y,
                            image: explosionImage,
                            duration: 30,
                        }),
                    );

                    !isMuted && whistleSound.isLoaded() && whistleSound.play();

                    return false;
                }

                if (
                    oppoents.some((opponent) =>
                        opponent.collidedWithPlayer(police),
                    )
                ) {
                    particles.push(
                        new Particle({
                            x: police.state.x,
                            y: police.state.y,
                            image: explosionImage,
                            duration: 30,
                        }),
                    );

                    return false;
                }

                return true;
            });

            // add more opponents every second
            if (p.frameCount % 60 === 0) {
                score += 1;

                const lane = roadSegments[0].getRandomLane(p);

                oppoents.push(
                    new Opponent({
                        image: p.random([redCardImage, purpleCardImage]),
                        x: lane + 25,
                        y: p.height + 500,
                        height: 100,
                        width: 50,
                        speed: 5,
                        from: "bottom",
                    }),
                );

                polices.push(
                    new Opponent({
                        image: policeImage,
                        x: lane + 20,
                        y: -20,
                        height: 39,
                        width: 71,
                        speed: 5,
                        from: "top",
                    }),
                );
            }
        };

        p.windowResized = () => {
            p.resizeCanvas(canvas.clientWidth, canvas.clientHeight);

            // rerun the setup function to recalculate the lanes
            roadSegments = [];
            p.setup();
        };
    };

    const onMenuButtonClick = (p: p5) => {
        showPage(pauseScreen);
        hidePage(HUD);

        backgroundMusic.pause();
        p.noLoop();
    };

    const startGame = (p: p5) => {
        hidePage(startScreen);
        showPage(HUD);

        !isMuted && backgroundMusic.play();
        p.loop();
    };

    const restartGame = (p: p5) => {
        hidePage(pauseScreen);
        hidePage(gameoverScreen);
        showPage(HUD);

        lives = 3;
        score = 0;
        infractions = 0;

        !isMuted && backgroundMusic.play();
        p.loop();
    };

    const toggleMute = () => {
        isMuted = !isMuted;
        muteButton.innerText = isMuted ? "Unmute" : "Mute";
        localStorage.setItem("isMuted", isMuted.toString());
    };

    const resumeGame = (p: p5) => {
        hidePage(pauseScreen);
        showPage(HUD);

        !isMuted && backgroundMusic.play();
        p.loop();
    };

    let p5Script = document.createElement("script");
    p5Script.src =
        "https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/p5.min.js";

    let p5SoundScript = document.createElement("script");
    p5SoundScript.src =
        "https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.1/addons/p5.sound.min.js";

    document.head.appendChild(p5Script).onload = () => {
        document.head.appendChild(p5SoundScript).onload = () => {
            const p = new p5(sketch, canvas);

            menuButton.addEventListener("click", () => onMenuButtonClick(p));
            playButton.addEventListener("click", () => startGame(p));
            resumeButton.addEventListener("click", () => resumeGame(p));
            muteButton.addEventListener("click", toggleMute);
            for (let button of playAgainButton) {
                button.addEventListener("click", () => restartGame(p));
            }
        };
    };
</script>
