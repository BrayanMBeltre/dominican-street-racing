<div
    id="canvas"
    class="w-screen h-full max-w-[768px]"
    draggable="false"
    oncontextmenu="return false"
    onselectstart="return false"
    ondragstart="return false"
>
</div>

<script src="https://cdn.jsdelivr.net/npm/p5@1.9.1/lib/p5.js"></script>

<script>
    const canvas = document.getElementById("canvas")!;
    const lifeBar = document.getElementById("life-bar")!;
    const fpsCounter = document.getElementById("fps-counter")!;

    import { Player } from "@/game/player";
    import { Opponent } from "@/game/opponent";
    import { RoadSegment } from "@/game/roadSegment";

    const sketch = (p: p5) => {
        // Images
        let redCardImage: p5.Image;
        let greenCardImage: p5.Image;
        let purpleCardImage: p5.Image;

        let player: Player;
        let playerCarWidth = 50;
        let playerCarHeight = 100;
        let oppoents: Array<Opponent> = [];
        let life = 40;
        let isGameOver = false;

        // Road
        let roadColor = "#242526";
        let roadSegments: Array<RoadSegment> = [];
        let laneWidth = playerCarWidth * 2;

        p.preload = () => {
            redCardImage = p.loadImage("/assets/Car_Red.png");
            greenCardImage = p.loadImage("/assets/Car_Green.png");
            purpleCardImage = p.loadImage("/assets/Car_Purple.png");
        };

        p.setup = () => {
            p.createCanvas(canvas.clientWidth, canvas.clientHeight);

            // TODO: Move this to the segment class
            // check how many lanes we can fit given the width of the cars and the width of the canvas
            const roadRows = canvas.clientHeight / 250;

            for (let row = 0; row < roadRows; row++) {
                roadSegments.push(
                    new RoadSegment({
                        y: row * 250,
                        laneWidth: laneWidth,
                        speed: 5,
                    }),
                );
            }

            player = new Player({
                x: p.width / 2,
                y: p.height - 200,
                image: greenCardImage,
                height: playerCarHeight,
                width: playerCarWidth,
                speed: 5,
            });
        };

        p.draw = () => {
            p.background(roadColor);

            // UI
            fpsCounter.textContent = `FPS: ${p.frameRate().toFixed(2)}`;
            lifeBar.textContent = `Life: ${life}`;

            // Draw the road segments
            for (const segment of roadSegments) {
                segment.draw(p);
            }

            // move the last segment to the front
            if (roadSegments[roadSegments.length - 1].isOffScreen(p)) {
                let lastSegment = roadSegments.pop()!;
                lastSegment.state.y = -250;
                roadSegments.unshift(lastSegment);
            }

            // if (life <= 0) {
            //     // isGameOver = true;
            //     alert("Game Over");
            //     return;
            // }

            player.draw(p);

            for (let opponent of oppoents) {
                opponent.draw(p);
            }

            oppoents = oppoents.filter((oppoent) => {
                if (oppoent.isOffScreen()) {
                    return false;
                }

                if (oppoent.collidedWithPlayer(player)) {
                    life -= 10;
                    return false;
                }

                return true;
            });

            if (p.frameCount % 60 === 0) {
                const lane = roadSegments[0].getRandomLane(p);

                oppoents.push(
                    new Opponent({
                        image: p.random([redCardImage, purpleCardImage]),
                        x: lane + 25,
                        y: p.height + 500,
                        height: 100,
                        width: 50,
                        speed: 5,
                    }),
                );
            }
        };

        p.windowResized = () => {
            p.resizeCanvas(canvas.clientWidth, canvas.clientHeight);
            // rerun the setup function to recalculate the lanes
            p.setup();
        };
    };

    window.addEventListener("DOMContentLoaded", () => {
        new p5(sketch, canvas);
    });
</script>
